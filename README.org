* CL-CPP-GENERATOR
  
** Introduction
This project provides the Common Lisp function ~emit-cpp &key code
str~. It receives a list of special s-expressions and emits
corresponding C++ code into a string.

** Example

#+BEGIN_SRC common-lisp
(with-open-file (s "o.cpp"
                   :direction :output
                   :if-exists :supersede
                   :if-does-not-exist :create)
  (emit-cpp :str s :code
            '(with-compilation-unit
              (include <complex>)
              (include "org_types.h")
              (with-namespace N
                (class CommandsHandler ()
                 (access-specifier public)
                 (constructord CommandsHandler ((callbacks :type "const DeviceCallbacks")))
                 (functiond HandleRxBlock ((data :type "const uint16_t")) void))
                (function HandleRxBlock ((data :type "const uint16_t")) void
                 (decl ((a :type uint16_t :init 3)
                        (b :type uint16_t)))
                 (+= a data))))))
#+END_SRC

#+BEGIN_SRC c++
#include "org_types.h"
#include <complex>
namespace N {
class CommandsHandler {
public:
  CommandsHandler(const DeviceCallbacks callbacks);
  void HandleRxBlock(const uint16_t data);

}

void HandleRxBlock(const uint16_t data){
  uint16_t a = 3;
  uint16_t b;
  ;
  a += data;
}
};
#+END_SRC

include arg
 arg either keyword like <stdio.h> or a string

function name params* ret expr1 expr2 ... 
name .. function name
parameters .. 0 or more but always a list
ret .. return value


constructord name params*
functiond name params* ret expr ..



struct
union
class identifier base-clause
identifier .. class name like dfa%%flash
base-clause .. (()) or ((public virtual buh%%fcsdf)) or ((public virtual buh%%fcsdf) (private B::C))

with-namespace name &rest cmds

with-compilation-unit &rest cmds

binary operator (+ a  b c) 
a + b + c

setf a b c d
a = b; c = d

computed assignemnt a b
a += b

logical operator ==
a == b

compound-statement (a b c)
{
 a;
 b;
 c;
}

decl ((name :type type :init 0) ( .. ) (.. ) .. )

type name = 0;


let 
just like lisp, expands into block with decl inside

if cond yes [no]

for
(for ((i a :type int) (< i n) (+= i 1)))
for(int i=a;i<n;i+=1)

i only allow one variable initialization


statement 
ensure a semicolon at the end



TAGBODY {tag | statement}*

Define tags for use with GO. The STATEMENTS are evaluated in order, skipping
TAGS, and NIL is returned. If a statement contains a GO to a defined TAG
within the lexical scope of the form, then control is transferred to the next
statement following that tag. A TAG must be an integer or a symbol. A
STATEMENT must be a list. Other objects are illegal within the body.


# References

- how to write a dsl in lisp: https://www.youtube.com/watch?v=5FlHq_iiDW0

- http://voodoo-slide.blogspot.de/2010/01/amplifying-c.html

- https://github.com/burtonsamograd/sxc

- https://github.com/shirok/Gauche/blob/master/lib/gauche/cgen/cise.scm

- https://news.ycombinator.com/item?id=13199610
